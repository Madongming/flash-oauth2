<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register Developer - Flash OAuth2 Admin</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      border-radius: 15px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .header {
      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
      color: white;
      padding: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .header-content h1 {
      font-size: 2rem;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .breadcrumb {
      color: #bdc3c7;
      font-size: 0.9rem;
    }

    .breadcrumb a {
      color: #ecf0f1;
      text-decoration: none;
    }

    .breadcrumb a:hover {
      text-decoration: underline;
    }

    .content {
      padding: 40px;
    }

    .form-container {
      max-width: 500px;
      margin: 0 auto;
    }

    .form-group {
      margin-bottom: 25px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #2c3e50;
      font-size: 0.95rem;
    }

    .form-group input {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e1e8ed;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background-color: #f8f9fa;
    }

    .form-group input:focus {
      outline: none;
      border-color: #667eea;
      background-color: white;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-group input:required {
      border-left: 4px solid #e74c3c;
    }

    .form-group input:required:valid {
      border-left: 4px solid #27ae60;
    }

    .required {
      color: #e74c3c;
    }

    .help-text {
      font-size: 0.85rem;
      color: #6c757d;
      margin-top: 5px;
    }

    .btn {
      display: inline-block;
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      text-decoration: none;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-right: 10px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    .btn-secondary {
      background: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background: #545b62;
      transform: translateY(-2px);
    }

    .actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #e1e8ed;
    }

    .error-message {
      background: #fee;
      color: #c33;
      padding: 12px 16px;
      border-radius: 8px;
      border-left: 4px solid #e74c3c;
      margin-bottom: 20px;
      display: none;
    }

    .success-message {
      background: #efe;
      color: #393;
      padding: 12px 16px;
      border-radius: 8px;
      border-left: 4px solid #27ae60;
      margin-bottom: 20px;
      display: none;
    }

    @media (max-width: 768px) {
      .container {
        margin: 10px;
        border-radius: 10px;
      }

      .header {
        padding: 20px;
      }

      .header h1 {
        font-size: 1.5rem;
      }

      .content {
        padding: 20px;
      }

      .actions {
        flex-direction: column;
        gap: 10px;
      }

      .btn {
        width: 100%;
        text-align: center;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <div class="header-content">
        <h1>Register Developer</h1>
        <div class="breadcrumb">
          <a href="/admin/dashboard">Dashboard</a> / Register Developer
        </div>
      </div>
    </div>

    <div class="content">
      <div class="form-container">
        <div class="error-message" id="error-message"></div>
        <div class="success-message" id="success-message"></div>

        <form id="registerForm" method="POST" action="/admin/developers">
          <div class="form-group">
            <label for="name">Developer Name <span class="required">*</span></label>
            <input type="text" id="name" name="name" required placeholder="Enter developer name" autocomplete="name">
            <div class="help-text">The full name of the developer or organization</div>
          </div>

          <div class="form-group">
            <label for="email">Email Address <span class="required">*</span></label>
            <input type="email" id="email" name="email" required placeholder="developer@example.com"
              autocomplete="email">
            <div class="help-text">Primary contact email for this developer account</div>
          </div>

          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input type="tel" id="phone" name="phone" placeholder="phone number" autocomplete="tel">
            <div class="help-text">Optional contact phone number</div>
          </div>

          <div class="actions">
            <a href="/admin/dashboard" class="btn btn-secondary">Cancel</a>
            <button type="submit" class="btn btn-primary">Register Developer</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    document.getElementById('registerForm').addEventListener('submit', async function (e) {
      e.preventDefault()

      const formData = new FormData(this)
      const data = Object.fromEntries(formData)

      const errorDiv = document.getElementById('error-message')
      const successDiv = document.getElementById('success-message')

      // Hide previous messages
      errorDiv.style.display = 'none'
      successDiv.style.display = 'none'

      try {
        const response = await fetch('/admin/developers', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams(data)
        })

        if (response.ok) {
          successDiv.textContent = 'Developer registered successfully! Redirecting...'
          successDiv.style.display = 'block'

          // Redirect to dashboard after a short delay
          setTimeout(() => {
            window.location.href = '/admin/dashboard'
          }, 2000)
        } else {
          const errorData = await response.text()
          errorDiv.textContent = errorData || 'Failed to register developer. Please try again.'
          errorDiv.style.display = 'block'
        }
      } catch (error) {
        errorDiv.textContent = 'Network error. Please check your connection and try again.'
        errorDiv.style.display = 'block'
      }
    })

    // Phone number formatting
    document.getElementById('phone').addEventListener('input', function (e) {
      let value = e.target.value.replace(/\D/g, '')
      if (value.length > 0) {
        if (value.length <= 3) {
          value = `(${value}`
        } else if (value.length <= 6) {
          value = `(${value.slice(0, 3)}) ${value.slice(3)}`
        } else {
          value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6, 10)}`
        }
      }
      e.target.value = value
    });
  </script>
</body>

</html>