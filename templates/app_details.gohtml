<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{if .title}}{{.title}}{{else}}Application Details{{end}}{{if .app_id}} - {{.app_id}}{{end}}</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      border-radius: 15px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .header {
      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
      color: white;
      padding: 30px;
    }

    .header h1 {
      font-size: 2rem;
      margin-bottom: 10px;
    }

    .breadcrumb {
      opacity: 0.8;
    }

    .breadcrumb a {
      color: #74b9ff;
      text-decoration: none;
    }

    .content {
      padding: 40px;
    }

    .actions {
      display: flex;
      gap: 15px;
      margin-bottom: 30px;
      flex-wrap: wrap;
    }

    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
    }

    .btn-primary {
      background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0, 184, 148, 0.4);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #6c5ce7 0%, #5f3dc4 100%);
      color: white;
    }

    .keys-grid {
      display: grid;
      gap: 25px;
    }

    .key-card {
      background: white;
      border: 1px solid #e1e8ed;
      border-radius: 12px;
      padding: 25px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .key-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .key-id {
      font-size: 1.2rem;
      font-weight: bold;
      color: #2c3e50;
    }

    .key-status {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      font-weight: bold;
    }

    .status-active {
      background: #d4edda;
      color: #155724;
    }

    .status-expired {
      background: #f8d7da;
      color: #721c24;
    }

    .status-revoked {
      background: #f8d7da;
      color: #721c24;
    }

    .key-info {
      margin-bottom: 20px;
    }

    .key-info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }

    .info-item {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
    }

    .info-label {
      font-weight: bold;
      color: #495057;
      margin-bottom: 5px;
    }

    .info-value {
      color: #6c757d;
      word-break: break-all;
    }

    .key-content {
      margin-top: 20px;
    }

    .key-section {
      margin-bottom: 25px;
    }

    .key-section h4 {
      color: #2c3e50;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .key-display {
      background: #2d3748;
      color: #68d391;
      padding: 20px;
      border-radius: 8px;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 0.9rem;
      line-height: 1.4;
      overflow-x: auto;
      white-space: pre-wrap;
      word-break: break-all;
      position: relative;
    }

    .copy-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #4a5568;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8rem;
    }

    .copy-btn:hover {
      background: #2d3748;
    }

    .key-actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .btn-small {
      padding: 8px 16px;
      font-size: 0.9rem;
    }

    .btn-danger {
      background: linear-gradient(135deg, #e17055 0%, #d63031 100%);
      color: white;
    }

    .btn-info {
      background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
      color: white;
    }

    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #7f8c8d;
    }

    .empty-state h3 {
      font-size: 1.5rem;
      margin-bottom: 15px;
    }

    .download-section {
      background: #e8f5e8;
      border: 1px solid #c3e6c3;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
    }

    .download-section h5 {
      color: #155724;
      margin-bottom: 10px;
    }

    .download-buttons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    @media (max-width: 768px) {
      .container {
        margin: 10px;
      }

      .header {
        padding: 20px;
      }

      .content {
        padding: 20px;
      }

      .key-info-grid {
        grid-template-columns: 1fr;
      }

      .copy-btn {
        position: static;
        margin-top: 10px;
      }
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <div class="breadcrumb">
        <a href="/admin/dashboard">Dashboard</a> > Application Details
      </div>
      <h1>üîë Key Management{{if .app_id}} - {{.app_id}}{{end}}</h1>
    </div>

    <div class="content">
      <div class="actions">
        <button onclick="generateKey()" class="btn btn-primary">üîß Generate New Key</button>
        <a href="/admin/dashboard" class="btn btn-secondary">‚Üê Back to Dashboard</a>
      </div>

      {{if .keys}}
      <div class="keys-grid">
        {{range .keys}}
        <div class="key-card">
          <div class="key-header">
            <div class="key-id">{{if .KeyID}}{{.KeyID}}{{else}}Unknown{{end}}</div>
            <span class="key-status status-{{if .Status}}{{.Status}}{{else}}unknown{{end}}">{{if .Status}}{{.Status}}{{else}}unknown{{end}}</span>
          </div>

          <div class="key-info-grid">
            <div class="info-item">
              <div class="info-label">Algorithm</div>
              <div class="info-value">{{if .Algorithm}}{{.Algorithm}}{{else}}Unknown{{end}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Created</div>
              <div class="info-value">{{.CreatedAt.Format "2006-01-02 15:04"}}</div>
            </div>
            {{if and .ExpiresAt (not .ExpiresAt.IsZero)}}
            <div class="info-item">
              <div class="info-label">Expires</div>
              <div class="info-value">{{.ExpiresAt.Format "2006-01-02 15:04"}}</div>
            </div>
            {{else}}
            <div class="info-item">
              <div class="info-label">Expires</div>
              <div class="info-value">Never</div>
            </div>
            {{end}}
            {{if and .LastUsedAt (not .LastUsedAt.IsZero)}}
            <div class="info-item">
              <div class="info-label">Last Used</div>
              <div class="info-value">{{.LastUsedAt.Format "2006-01-02 15:04"}}</div>
            </div>
            {{else}}
            <div class="info-item">
              <div class="info-label">Last Used</div>
              <div class="info-value">Never</div>
            </div>
            {{end}}
          </div>

          {{if eq .Status "active"}}
          <div class="key-content">
            <div class="key-section">
              <h4>üîí Private Key</h4>
              <div class="key-display" id="private-{{.KeyID}}">{{.PrivateKey}}<button class="copy-btn"
                  onclick="copyToClipboard('private-{{.KeyID}}')">üìã Copy</button></div>
            </div>

            <div class="key-section">
              <h4>üîì Public Key</h4>
              <div class="key-display" id="public-{{.KeyID}}">{{.PublicKey}}<button class="copy-btn"
                  onclick="copyToClipboard('public-{{.KeyID}}')">üìã Copy</button></div>
            </div>

            <div class="download-section">
              <h5>üì• Download Keys</h5>
              <div class="download-buttons">
                <button onclick="downloadKey('{{.KeyID}}', 'private')" class="btn btn-info btn-small">Download Private
                  Key</button>
                <button onclick="downloadKey('{{.KeyID}}', 'public')" class="btn btn-secondary btn-small">Download
                  Public Key</button>
                <button onclick="downloadKeyPair('{{.KeyID}}')" class="btn btn-primary btn-small">Download Key
                  Pair</button>
              </div>
            </div>
          </div>
          {{end}}

          <div class="key-actions">
            {{if eq .Status "active"}}
            <button class="btn btn-danger btn-small" onclick="revokeKey('{{.KeyID}}')">üö´ Revoke Key</button>
            {{end}}
          </div>
        </div>
        {{end}}
      </div>
      {{else}}
      <div class="empty-state">
        <h3>No Keys Generated</h3>
        <p>Generate your first cryptographic key pair for this application.</p>
        <button onclick="generateKey()" class="btn btn-primary" style="margin-top: 20px;">Generate Key Pair</button>
      </div>
      {{end}}
    </div>
  </div>

  <script>
    const APP_ID = '{{if .app_id}}{{.app_id}}{{else}}{{end}}';
    
    function generateKey () {
      const expiresIn = prompt('Enter expiration period (e.g., 30d, 1y, or leave empty for no expiration):')
      const payload = {}

      if (expiresIn && expiresIn.trim() !== '') {
        payload.expires_in = expiresIn.trim()
      }

      fetch(`/api/admin/apps/${APP_ID}/keys`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            alert('Error: ' + data.error)
          } else {
            alert('Key pair generated successfully!')
            location.reload()
          }
        })
        .catch(error => {
          alert('Error: ' + error.message)
        })
    }

    function revokeKey (keyId) {
      if (confirm('Are you sure you want to revoke this key? This action cannot be undone and will invalidate all tokens signed with this key.')) {
        fetch(`/api/admin/keys/${keyId}/revoke`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              alert('Error: ' + data.error)
            } else {
              alert('Key revoked successfully')
              location.reload()
            }
          })
          .catch(error => {
            alert('Error: ' + error.message)
          })
      }
    }

    function copyToClipboard (elementId) {
      const element = document.getElementById(elementId)
      const text = element.textContent.replace('üìã Copy', '').trim()

      navigator.clipboard.writeText(text).then(() => {
        const btn = element.querySelector('.copy-btn')
        const originalText = btn.textContent
        btn.textContent = '‚úÖ Copied!'
        setTimeout(() => {
          btn.textContent = originalText
        }, 2000)
      }).catch(err => {
        alert('Failed to copy to clipboard')
      })
    }

    function downloadKey (keyId, type) {
      const elementId = type + '-' + keyId
      const element = document.getElementById(elementId)
      const content = element.textContent.replace('üìã Copy', '').trim()

      const blob = new Blob([content], { type: 'text/plain' })
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${keyId}_${type}_key.pem`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      window.URL.revokeObjectURL(url)
    }

    function downloadKeyPair (keyId) {
      const privateContent = document.getElementById('private-' + keyId).textContent.replace('üìã Copy', '').trim()
      const publicContent = document.getElementById('public-' + keyId).textContent.replace('üìã Copy', '').trim()

      const content = `# Private Key\n${privateContent}\n\n# Public Key\n${publicContent}`

      const blob = new Blob([content], { type: 'text/plain' })
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${keyId}_keypair.pem`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      window.URL.revokeObjectURL(url)
    }
  </script>
</body>

</html>