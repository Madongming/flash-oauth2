<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{.title}}</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
          sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .header {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        color: white;
        padding: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .header-content {
        text-align: left;
      }

      .header-actions {
        display: flex;
        align-items: center;
        gap: 15px;
      }

      .admin-info {
        background: rgba(255, 255, 255, 0.1);
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.9rem;
      }

      .logout-btn {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: background-color 0.3s ease;
      }

      .logout-btn:hover {
        background: #c0392b;
      }

      .header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
      }

      .header p {
        opacity: 0.9;
        font-size: 1.1rem;
      }

      .content {
        padding: 40px;
      }

      .stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
      }

      .stat-card {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        color: white;
        padding: 25px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      }

      .stat-card h3 {
        font-size: 2rem;
        margin-bottom: 10px;
      }

      .actions {
        display: flex;
        gap: 15px;
        margin-bottom: 40px;
        flex-wrap: wrap;
      }

      .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
      }

      .btn-primary {
        background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
        color: white;
      }

      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 184, 148, 0.4);
      }

      .btn-secondary {
        background: linear-gradient(135deg, #6c5ce7 0%, #5f3dc4 100%);
        color: white;
      }

      .btn-secondary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(108, 92, 231, 0.4);
      }

      .apps-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
      }

      .app-card {
        background: white;
        border: 1px solid #e1e8ed;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
      }

      .app-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
      }

      .app-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 15px;
      }

      .app-name {
        font-size: 1.3rem;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 5px;
      }

      .app-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: bold;
      }

      .status-active {
        background: #d4edda;
        color: #155724;
      }

      .status-suspended {
        background: #f8d7da;
        color: #721c24;
      }

      .app-info {
        margin-bottom: 20px;
      }

      .app-info p {
        margin-bottom: 8px;
        color: #7f8c8d;
      }

      .app-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
      }

      .btn-small {
        padding: 8px 16px;
        font-size: 0.9rem;
      }

      .btn-danger {
        background: linear-gradient(135deg, #e17055 0%, #d63031 100%);
        color: white;
      }

      .btn-info {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        color: white;
      }

      .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #7f8c8d;
      }

      .empty-state h3 {
        font-size: 1.5rem;
        margin-bottom: 15px;
      }

      @media (max-width: 768px) {
        .container {
          margin: 10px;
        }

        .header {
          padding: 20px;
          flex-direction: column;
          text-align: center;
          gap: 15px;
        }

        .header-content {
          text-align: center;
        }

        .header h1 {
          font-size: 2rem;
        }

        .content {
          padding: 20px;
        }

        .stats {
          grid-template-columns: 1fr;
        }

        .actions {
          flex-direction: column;
        }

        .apps-grid {
          grid-template-columns: 1fr;
        }
      }
    </style>
  </head>

  <body>
    <div class="container">
      <div class="header">
        <div class="header-content">
          <h1>üîê Key Management Platform</h1>
          <p>Manage external applications and their cryptographic keys</p>
        </div>
        <div class="header-actions">
          <div class="admin-info">üë§ ÁÆ°ÁêÜÂëò</div>
          <form method="POST" action="/admin/logout" style="margin: 0">
            <button type="submit" class="logout-btn">ÈÄÄÂá∫ÁôªÂΩï</button>
          </form>
        </div>
      </div>

      <div class="content">
        <div class="stats">
          <div class="stat-card">
            <h3>{{len .apps}}</h3>
            <p>Total Applications</p>
          </div>
          <div class="stat-card">
            <h3>{{countActive .apps}}</h3>
            <p>Active Applications</p>
          </div>
          <div class="stat-card">
            <h3>{{len .developers}}</h3>
            <p>Registered Developers</p>
          </div>
        </div>

        <div class="actions">
          <a href="/admin/developers/new" class="btn btn-primary"
            >üìù Register Developer</a
          >
          <a href="/admin/apps/new" class="btn btn-secondary"
            >üöÄ Register Application</a
          >
          <a href="/docs" class="btn btn-secondary">üìö API Documentation</a>
        </div>

        <!-- Developers Section -->
        {{if .developers}}
        <div id="developers-section" style="margin-bottom: 40px;">
          <h2 id="developers-title" style="color: #2c3e50; margin-bottom: 20px; border-bottom: 2px solid #74b9ff; padding-bottom: 10px;">üë®‚Äçüíª Registered Developers</h2>
          <div class="apps-grid">
            {{range .developers}}
            <div class="app-card">
              <div class="app-header">
                <div class="app-name">{{.Name}}</div>
                <span class="app-status status-{{.Status}}">{{.Status}}</span>
              </div>

              <div class="app-info">
                <p><strong>ID:</strong> {{.ID}}</p>
                <p><strong>Email:</strong> {{.Email}}</p>
                <p><strong>Phone:</strong> {{.Phone}}</p>
                <p><strong>API Quota:</strong> {{.APIQuota}} calls/day</p>
                <p>
                  <strong>Registered:</strong> {{.CreatedAt.Format "2006-01-02 15:04"}}
                </p>
              </div>

              <div class="app-actions">
                <button class="btn btn-info btn-small" onclick="viewDeveloperApps('{{.ID}}')">
                  üì± View Apps
                </button>
                {{if eq .Status "active"}}
                <button
                  class="btn btn-danger btn-small"
                  onclick="suspendDeveloper('{{.ID}}')"
                >
                  ‚è∏Ô∏è Suspend
                </button>
                {{else}}
                <button
                  class="btn btn-primary btn-small"
                  onclick="activateDeveloper('{{.ID}}')"
                >
                  ‚ñ∂Ô∏è Activate
                </button>
                {{end}}
              </div>
            </div>
            {{end}}
          </div>
        </div>
        {{end}}        <!-- Applications Section -->
        {{if .apps}}
        <div>
          <h2 style="color: #2c3e50; margin-bottom: 20px; border-bottom: 2px solid #00b894; padding-bottom: 10px;">üöÄ Registered Applications</h2>
          
          <!-- Return to full view button (hidden by default) -->
          <div id="return-button" style="display: none; margin-bottom: 20px;">
            <button onclick="showAllContent()" class="btn btn-secondary">
              ‚Üê Back to Full Dashboard
            </button>
          </div>
          
          <div class="apps-grid">
          {{range .apps}}
          <div class="app-card">
            <div class="app-header">
              <div class="app-name">{{.Name}}</div>
              <span class="app-status status-{{.Status}}">{{.Status}}</span>
            </div>

            <div class="app-info">
              <p><strong>ID:</strong> {{.ID}}</p>
              <p><strong>Developer:</strong> {{.DeveloperID}}</p>
              <p><strong>Description:</strong> {{.Description}}</p>
              <p><strong>Callback URL:</strong> {{.CallbackURL}}</p>
              <p><strong>Scopes:</strong> {{.Scopes}}</p>
              <p>
                <strong>Created:</strong> {{.CreatedAt.Format "2006-01-02 15:04"}}
              </p>
            </div>

            <div class="app-actions">
              <a href="/admin/apps/{{.ID}}" class="btn btn-info btn-small"
                >üîç View Details</a
              >
              <a
                href="/admin/apps/{{.ID}}/keys"
                class="btn btn-secondary btn-small"
                >üîë Manage Keys</a
              >
              {{if eq .Status "active"}}
              <button
                class="btn btn-danger btn-small"
                onclick="revokeApp('{{.ID}}')"
              >
                üö´ Revoke
              </button>
              {{end}}
            </div>
          </div>            {{end}}
          </div>
        </div>
        {{else}}
        <div class="empty-state">
          <h3>No Applications Registered</h3>
          <p>
            Get started by registering your first developer and application.
          </p>
          <a
            href="/admin/developers/new"
            class="btn btn-primary"
            style="margin-top: 20px"
            >Register Developer</a
          >
        </div>
        {{end}}
      </div>
    </div>

    <script>
      function revokeApp(appId) {
        if (
          confirm(
            'Are you sure you want to revoke this application? This action cannot be undone.'
          )
        ) {
          fetch(`/api/admin/apps/${appId}/revoke`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.error) {
                alert('Error: ' + data.error)
              } else {
                alert('Application revoked successfully')
                location.reload()
              }
            })
            .catch((error) => {
              alert('Error: ' + error.message)
            })
        }
      }

      function viewDeveloperApps(developerId) {
        // Hide developers section
        const developersSection = document.getElementById('developers-section');
        developersSection.style.display = 'none';
        
        // Show return button
        document.getElementById('return-button').style.display = 'block';
        
        // Filter applications to show only those belonging to this developer
        const appCards = document.querySelectorAll('.apps-grid .app-card');
        let hasApps = false;
        appCards.forEach(card => {
          const developerInfo = card.querySelector('.app-info p:nth-child(2)');
          if (developerInfo && developerInfo.textContent.includes(developerId)) {
            card.style.display = 'block';
            card.style.border = '2px solid #74b9ff';
            hasApps = true;
          } else {
            card.style.display = 'none';
          }
        });
        
        // Update applications section title
        const appsTitle = document.querySelector('h2:last-of-type');
        const developerName = document.querySelector(`[onclick="viewDeveloperApps('${developerId}')"]`)
          .closest('.app-card').querySelector('.app-name').textContent;
        appsTitle.textContent = `üöÄ Applications by ${developerName}`;
        
        if (!hasApps) {
          // Show empty state for this developer
          const appsGrid = document.querySelector('.apps-grid');
          appsGrid.innerHTML = `
            <div class="empty-state">
              <h3>No Applications Found</h3>
              <p>This developer hasn't registered any applications yet.</p>
            </div>
          `;
        }
        
        // Scroll to applications section
        const appsSection = document.querySelector('h2:last-of-type');
        if (appsSection) {
          appsSection.scrollIntoView({ behavior: 'smooth' });
        }
      }

      function showAllContent() {
        // Show developers section
        const developersSection = document.getElementById('developers-section');
        developersSection.style.display = 'block';
        
        // Hide return button
        document.getElementById('return-button').style.display = 'none';
        
        // Show all applications
        const appCards = document.querySelectorAll('.apps-grid .app-card');
        appCards.forEach(card => {
          card.style.display = 'block';
          card.style.border = '1px solid #e1e8ed'; // Reset border
        });
        
        // Reset applications section title
        const appsTitle = document.querySelector('h2:last-of-type');
        appsTitle.textContent = 'üöÄ Registered Applications';
        
        // Check if apps grid was replaced with empty state and reload if needed
        const emptyState = document.querySelector('.apps-grid .empty-state');
        if (emptyState) {
          location.reload();
        }
        
        // Scroll to top
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }

      function suspendDeveloper(developerId) {
        if (
          confirm(
            'Are you sure you want to suspend this developer? This will also suspend all their applications.'
          )
        ) {
          fetch(`/api/admin/developers/${developerId}/suspend`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.error) {
                alert('Error: ' + data.error)
              } else {
                alert('Developer suspended successfully')
                location.reload()
              }
            })
            .catch((error) => {
              alert('Error: ' + error.message)
            })
        }
      }

      function activateDeveloper(developerId) {
        if (
          confirm(
            'Are you sure you want to activate this developer?'
          )
        ) {
          fetch(`/api/admin/developers/${developerId}/activate`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.error) {
                alert('Error: ' + data.error)
              } else {
                alert('Developer activated successfully')
                location.reload()
              }
            })
            .catch((error) => {
              alert('Error: ' + error.message)
            })
        }
      }
    </script>
  </body>
</html>
